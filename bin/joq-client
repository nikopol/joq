#!/usr/bin/env perl

use warnings;
use strict;

use Time::HiRes qw(gettimeofday tv_interval);
use Getopt::Long;
use joq;
use joq::file;
use joq::client;

GetOptions(
	'help|?'      => \my $help,
	'debug|dbg|d' => \my $debug,
	'host|h=s'    => \my $host,
	'port|p=s'    => \my $port,
	'mode|m=s'    => \my $mode,
);

my $o = {
	debug => $debug || 0,
	host  => $host  || 'localhost',
	port  => $port  || 1970,
	mode  => $mode  || 'text',
};

sub help {
	print <<EOHELP
joq Client v$joq::VERSION

syntax:
$0 [-options] command [args]

options:
 -? --help            display pron picture
 -d --debug           verbose debug output
 -h --host hostname   set joq server hostname (default=localhost)
 -p --port port       set joq server port (default=1970)
 -m --mode fmt        set output format (yaml,json or text)

commands & args:
status                             : get joq status
load filename                      : load a local json with jobs, 
                                     and send it to the server
list                               : list queued jobs 
show jobname|jobid                 : show detail on a given job
add  [shell|code|class] cmd [args] : queue a job
     [name=foo] [delay=0(seconds)] 
     [repeat=0(seconds)] [count=1]
     [\@h:m]
del jobname|jobid                  : unqueue a job, stopping it if it runs
stop jobname|jobid                 : stop a running job
history [jobname|jobid]            : show ended jobs, or detail on one
killall                            : clear the queue, killing all jobs
shutdown                           : send joq server to the graveyard
pause                              : pause job's queue
resume                             : resume job's queue

EOHELP
;
	exit 1;
}

help if $help || !@ARGV;

my $client;
my %commands = (
	load => sub {
		my $file = shift;
		return "file not found" unless $file && -r $file;
		my @lines = map { chomp; s/^\s+//; s/\s+$//; $_ } readfile($file);
		$client->load(join('',@lines));
	},
	show => sub {
		my $job = shift;
		return "requires a jobid or a jobname" unless $job;
		$client->show( $job );
	},
	add => sub {
		return "requires at least a shell command" unless @_;
		map { s/^\@/time=/  } @_;
		$client->add( @_ );
	},
	del => sub {
		my $job = shift;
		return "requires a jobid or a jobname" unless $job;
		$client->del( $job );
	},
	stop => sub {
		my $job = shift;
		return "requires a jobid or a jobname" unless $job;
		$client->stop( $job );
	},
	history  => sub { $client->history( shift ) },
	list     => sub { $client->list },
	killall  => sub { $client->killall },
	shutdown => sub { $client->shutdown },
	status   => sub { $client->status },
	pause    => sub { $client->pause },
	resume   => sub { $client->resume },
);

my $cmd = lc(shift @ARGV);
die("i've searched hard, deep and carefully, but i didn't find this command\n")
	unless exists $commands{$cmd};

$client = joq::client->new(%$o);
die("unable to connect\n".$client->error."\n") unless $client && $client->connected;
print $commands{$cmd}(@ARGV),"\n";
0;
