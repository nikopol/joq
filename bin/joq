#!/usr/bin/env perl

use warnings;
use strict;

use Getopt::Long;
use YAML::XS;
use joq;
use joq::client;

GetOptions(
	'help|h|?'           => \my $help,
	'deamon|d'           => \my $daemonize,
	'log|l=s'            => \my $logcon,
	'loglevel|ll=s'      => \my $loglevel,
	'logfile|lf=s'       => \my $logfile,
	's|server=s'         => \my $server,
	'b|backup=s'         => \my $backup,
	'polling|poll|p=s'   => \my $polling,
	'timezone|tz=s'      => \my $timezone,
	'oneshot|os|q'       => \my $oneshot,
	'maxfork|m=s'        => \my $maxfork,
	'user|u=s'           => \my $user,
	'demo'               => \my $demo,
);

my $SAMPLE = <<EOSAMPLE
---
polling: 2        #poll every 2 seconds
server: off       #no telnet server
oneshot: 1        #quit when queue is empty
maxfork: 2        #max simultaneous jobs
log:
  level: info     #error>warning>notice>info>debug>core
  file: /tmp/joq.log
  console: color  #can be short/long/color
jobs:
- name: fartman
  shell: echo
  args: prout
  when:
    alone: 1
    delay: 3s
- shell: echo thats stinks
  when:
    after: fartman
    count: 1
- name: countdown
  code: for(qw/three two one/){ print "\$_\\n"; sleep 2 }
- shell: echo liftoff
  when:
    after: countdown
    count: 1
EOSAMPLE
;

if( $help ) {
	{
		print <<EOHELP
JOQ v$joq::VERSION
niko °L° 2010-2011

syntax:
$0 [options] [jobsfile]

avalaible options:
 -h -help              : order a double pepperoni pizza
 -demo                 : run the sample config file (see below)
 -d -daemon            : spawn as deamon from the fifth circle
 -u -user user         : set joq uid (only if started as root)
 -l -log mode          : output to stdout color(default),long,short,none
 -ll -loglevel level   : error,warning,notice,info(default),debug
 -lf -logfile filename : output log to filename
 -s -server host:port  : set telnet client server
                         disabled= -s off
                          default= -s localhost:1970
 -p -poll -polling s   : set polling to s seconds (default=10s)
 -b backupfile         : set backup file
                         disabled= -b off
                          default= -b ./joq.conf
 -tz -timezone zone    : set time zone (default=Europe/Paris)
 -q -oneshot           : quit on empty queue
 -m -maxfork int       : set max concurent job (default=4)

notes:
  options overload jobs/backup file parameters
  the only argument is an optionnal jobs/config file (json or yaml)
  current state will be saved in backup file (by default ./joq.conf)
  if no jobs/config file is provided and a backup file is found,
  it will be loaded automatically at startup

sample config file:
$SAMPLE
job parameters:
  name     => "jobname" (default=first word of class/code/shell)
  shell    => sh cmd
  nice     => int (-20=fast ... 19=slow)
  class    => perl class::name with ->new and ->run([args]) methods
  package  => perl class::name to use
  args     => array of arguments given to the class
  code     => perl_code_to_eval
  extend   => file:jobname inherit from a job in another file
              if jobname is not provided, first job is taken
  priority => 1-10 (1=not urgent,10=urgent,default=5) 
  logfile  => filename for job independant log output
  timeout  => duration (default=no timeout)
  when     => {
     if         => perl_code_to_eval as start condition
     alone      => 0|1 start only if no jobs running, 
	               and no jobs can start while running
     dayofweek  => "all|sat,mon,1-7" 1=monday, time => "hh:mm,hh:mm,.."
     dayofmonth => "all|1-31,...",  time => "hh:mm,hh:mm,..."
     dayofyear  => "all|1-365,...", time => "hh:mm,hh:mm,..."
     repeat     => duration ("12h" or "32s" or "1h2m3s")
     after      => "job1 or job2 and job3"
     start      => "yyyy-mm-dd hh:mm"
     delay      => duration (see repeat)
     count      => int nbtime
  }

notes:
  all parameters are optionals except at least 'shell' or 'class'
  or 'code'. if no when parameter is provided, when=>{ count=>1 }
  is assumed.

EOHELP
	}
	exit 1;
}

if( $demo ) {
	print <<EODEMO
the following config file will be executed:
$SAMPLE
press [ENTER] to start or [CONTROL]+[C] to cancel
EODEMO
	;
	<>;
	joq::run( %{ Load( $SAMPLE) } );
	exit 1;
}

my %o;
$o{server}  = $server if $server;
$o{polling} = $polling if $polling;
$o{backup}  = $backup || './joq.conf';
delete $o{backup} if $o{backup} =~ /off|disabled?/i;
my $load    = @ARGV ? shift @ARGV : $o{backup};
$o{load}    = $load if -e $load;
$o{oneshot} = 1 if $oneshot;
$o{maxfork} = $maxfork if $maxfork;
$o{log_level}   = $loglevel if $loglevel;
$o{log_file}    = $logfile if $logfile;
$o{log_console} = $logcon if $logcon;

if( $user ) {
	die("you must be root to change uid to $user\n") if $<;
	die("unknow user $user\n") unless my $uid = getpwnam($user);
	$< = $uid;
	die("error switching to $user ($uid) : $!\n") if $!;
}

if( $o{server} =~ m/^([^\:]+)\:(\d+)$/ ) {
	die "$o{server} already used!\n"
		if joq::client->new(host=>$1,port=>$2)->connected;
}

if( $daemonize ) {
	use POSIX 'setsid';
	chdir '/' or die "can't chdir to /: $!";
	open STDIN, '/dev/null' or die "can't read /dev/null: $!";
	open STDOUT, '>/dev/null' or die "can't write to /dev/null: $!";
	defined(my $pid = fork) or die "can't fork: $!";
	exit 0 if $pid;
	die "can't start a new session: $!" if setsid == -1;
	open STDERR, '>&STDOUT' or die "can't dup stdout: $!";
	delete $o{log_mode};
}

joq::run( %o );
